#!/usr/bin/python
from __future__ import print_function 
import datetime
import gc
import hashlib
import os
import subprocess
import sys
import time
' Program utilized to perform baseline analysis during behavioral analysis of malware '
batch_file=r'dir.bat'
################################################################################
# function utilized to open and buffer file as bytes
################################################################################
def file_buffer(fname):

	buf=''
	with open(fname,'rb') as f:
		buf=f.read()
	return buf

################################################################################
# function utilized to get md5 and sha1 hashes from file buffer 
# input: file as bytes get_file_hashes(buffer as raw bytes)
# return: tuple (md5 hash, sha1 hash) 
################################################################################
def get_file_hashes(buf):

	return hashlib.md5(buf).hexdigest(), hashlib.sha1(buf).hexdigest()


################################################################################
# function utilized to get the commands for interaction with the OS 
# input: time_stomp for file creation purposes as an integer int(time.time())
# return: tuple ( services, ports, tasks, directory, users, file_integrity)
################################################################################
def get_triage_cmds(xml_outfile_name):

	services=r'wmic service list brief' #list current services
	ports=r'netstat -anob' #list port status
	tasks=r'tasklist' #running processes
	directory='dir.bat' #dir walk
	users=r'net users' #current local user accounts
	file_integ=r'fciv -md5 -xml' +xml_outfile_name +'-r c:\\windows' #check file integrity in windows dir
	
	return [services,ports,tasks,directory, users, file_integ]

################################################################################
# function utilized to format a time stamp into human readable format
# input: get_formated_timestomp(time.time())
# return: string '2019-02-07 08:14:39'
################################################################################
def get_formated_timestomp(time_stomp):
	return datetime.datetime.fromtimestamp(time_stomp).strftime('%Y-%m-%d %H:%M:%S')

################################################################################
# function utilized to format an error message
# input: Exception as e
# return: string 'error encountered: <error>'
################################################################################
def get_error_msg(e):
	return 'error encountered: {}'.format(e)

################################################################################
# function utilized to retrieve file metadata
# input: filename as string
# return: list of strings 
#	[
#		'filename: <filename>',
#		'atime: <accessed_time>'
#		'mtime: <modified time>',
#		'ctime: <created-time>',
#		'size: <size of file> Bytes',
#		'file hashes \n  <md5_hash>\n  <sha1_hash>'
#	]
################################################################################
def get_file_metadata(fname):
	lines=[]
	try:

		file_stat=os.stat(fname)
		lines.append('filename: {}'.format(fname))
		lines.append('atime:\t{}'.format(get_formated_timestomp(file_stat.st_atime)))
		lines.append('mtime:\t{}'.format(get_formated_timestomp(file_stat.st_mtime)))
		lines.append('ctime:\t{}'.format(get_formated_timestomp(file_stat.st_ctime)))
		lines.append('size:\t{} Bytes'.format(file_stat.st_size))
		buf=file_buffer(fname)
		md5h,sha1h=get_file_hashes(buf)
		lines.append('file hases: \n  md5:{}\n  sha1:{}'.format(md5h,sha1h))

	except Exception as e:

		print("get_file_metadata: " + get_error_msg(e))
		lines=[]
		return lines

	try:

		del buf
		del md5h
		del sha1h
		del file_stat
		gc.collect()

	except Exception as e:	

		print(get_error_msg(e))

	return lines


################################################################################
# function utilized to interact with the operating system
# input: commands as a list
# return: tuple (stdout, stderr) 
################################################################################
def get_command_output(cmds):
	try:
		process = subprocess.Popen(cmds, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		stdout, stderr = process.communicate()
		return stdout,stderr

	except Exception as e:
		print('CMD error')
		print(e)
		return -1, 'error occured: \t{}'.format(e)


################################################################################
# function utilized to write data to a file
# input: list of strings to write, int(time.time())
# return: None on success, exit on failure
################################################################################

def write_lines_to_file(lines,outfile_name):
	try:	
		with open(outfile_name,'a+') as f:
			for i in lines:
				f.write(str(i) +'\n')
		del f
	except Exception as e:
		print('unable to write to file: {}\n'.format(e))
		exit()

	return

################################################################################
# Main function
# input: fname to triage (malware sample)
# return: 0 on success, exit on failure
################################################################################

# C:\Users\User\Desktop\Malware\download.exe
def main():
	time_stomp=0.0
	outfile_name=''
	if (len(sys.argv) != 2):

		print('%USAGE%: python baseline.py <filename>')
		exit()

	else:
		time_stomp=time.time()
		outfile_name='{}_triage{}.txt'.format(sys.argv[1].split('\\')[-1].replace('.','_'),str(int(time_stomp)))
		xml_outfile_name='file_hashes_'+str(int(time_stomp))+'.xml'
		fname='\\\\'.join(sys.argv[1].split('\\'))
		if(os.path.isfile(fname)):
			print('Getting file metadata...')
			lines=get_file_metadata(fname)
			write_lines_to_file(lines,outfile_name)
		

	
	cmds=get_triage_cmds(xml_outfile_name)
	lines=[]	
	for i in cmds:
		output,error =	get_command_output(i)
		if "<type 'int'>" not in str(type(output)):
			lines.append(output)
		else:	
			print('Passing: {}'.format(error))
	if lines:
		print('Writing triage data!')
		time.sleep(3)
		write_lines_to_file(lines,outfile_name)
		print('Wrote data to: {}'.format(outfile_name,xml_outfile_name))
		if os.path.isfile(batch_file): os.remove(batch_file)
		print('DONE!')
	return 0
	
################################################################################
# dunder function
################################################################################
if __name__ == '__main__':
	cwd=os.getcwd()
	f=open(batch_file,'w+')
	f.write(r'dir c:\ /s /ah')
	f.flush()
	f.close()
	main()
        


